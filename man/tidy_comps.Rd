% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy-comps.R
\name{tidy_comps}
\alias{tidy_comps}
\alias{tidy_ages_raw}
\alias{tidy_ages_weighted}
\alias{tidy_lengths_raw}
\alias{tidy_lengths_weighted}
\title{Tidy age or length composition data for plotting or modelling}
\usage{
tidy_ages_raw(...)

tidy_ages_weighted(...)

tidy_lengths_raw(...)

tidy_lengths_weighted(...)

tidy_comps(
  dat,
  survey = c("SYN WCHG", "SYN HS", "SYN QCS", "SYN WCVI", "HBLL OUT N", "HBLL OUT S",
    "IPHC FISS"),
  year_range = NULL,
  spp_cat_code = 1,
  area_grep_pattern = "*",
  ageing_method_codes = NULL,
  usability_codes = c(0, 1, 2, 6),
  bin_size = 2,
  age_length = c("age", "length"),
  sample_type = c("survey", "commercial"),
  frequency_type = c("raw", "weighted"),
  dat_survey_sets = NULL,
  dat_catch = NULL,
  remove_unsexed = TRUE,
  ...
)
}
\arguments{
\item{...}{Arguments to pass to \code{\link[=set_fishing_year]{set_fishing_year()}}}

\item{dat}{The input samples data frame from \code{\link[=get_commercial_samples]{get_commercial_samples()}} or
\code{\link[=get_survey_samples]{get_survey_samples()}}.}

\item{survey}{A character vector of survey names to use. These should match
the survey abbreviations in GFBio. All of the survey listed here will be
rendered in the final plot in the order that they are specified to this
argument.}

\item{year_range}{An optional range of years to plot.}

\item{spp_cat_code}{A numeric vector of species category codes to include
for the commercial samples. Defaults to \code{1}, which refers to unsorted
samples.}

\item{area_grep_pattern}{A \code{\link[=grep]{grep()}} pattern to match the major statistical
area descriptions. The pattern \code{"*"} will return all areas. For example,
\code{"5[CDE]+"} would return areas 5C, 5D, and 5E. See \code{\link[base:regex]{base::regex()}}.}

\item{ageing_method_codes}{A numeric vector of ageing method codes to filter
on. Default to \code{NULL}, which brings in all valid ageing codes.
See \code{\link[=get_age_methods]{get_age_methods()}}.}

\item{usability_codes}{An optional vector of usability codes.
All usability codes not in this vector will be omitted.
Set to \code{NULL} to include all samples.}

\item{bin_size}{Bin size for length binning.}

\item{age_length}{Should the function operate on ages or lengths?}

\item{sample_type}{Are the samples from a commercial or survey source?}

\item{frequency_type}{Should the frequencies or proportions be based on raw
value or with weighted samples?}

\item{dat_survey_sets}{A data frame from \link{get_survey_sets(..., join_sample_ids = TRUE)}. Needed for
weighted samples if \code{sample_type = "survey"}.}

\item{dat_catch}{A data frame from \code{\link[=get_catch]{get_catch()}}. Needed for weighted samples
if \code{sample_type = "commercial"}.}

\item{remove_unsexed}{Logical}
}
\description{
These functions tidy, filter, and calculate frequencies for ages or lengths
over time for survey or commercial data. They can calculate raw frequencies
or frequencies in which the samples are weighted. See \code{\link[=weight_comps]{weight_comps()}} for
details on the weighting procedure.
}
\details{
The function \code{tidy_comps()} is the main workhorse function, but as a user you
can use the helper functions \code{tidy_ages_raw()}, \code{tidy_ages_weighted()},
\code{tidy_lengths_raw()}, and \code{tidy_lengths_weighted()}. These functions
simply call \code{tidy_comps()} with appropriate argument values for \code{age_length}
and \code{frequency_type}.

Note that the \code{length_bin} column will contain the mid value of that length
bin. E.g. \code{13} with \code{bin_size = 2} would represent a bin from \code{12} to \code{14}.
}
\examples{
\dontrun{

# # extract data with get_*() functions:
# # main age/length data:
# rs_comm_samples <- get_commercial_samples("redstripe rockfish",
#   discard_keepers = TRUE)
# rs_survey_samples <- get_survey_samples("redstripe rockfish")
#
# # for weighting:
# rs_catch <- get_catch("redstripe rockfish")
# rs_survey_sets <- get_survey_sets("redstripe rockfish")

# calculate raw age frequencies for survey data:
tidy_ages_raw(rs_survey_samples,
  sample_type = "survey")

# calculate weighted age frequencies for survey data:
tidy_ages_weighted(rs_survey_samples,
  sample_type = "survey",
  dat_survey_sets = rs_survey_sets)

# calculate raw length frequencies for survey data:
tidy_lengths_raw(rs_survey_samples,
  sample_type = "survey",
  bin_size = 2)

# calculate raw age frequencies for commercial data:
tidy_ages_raw(rs_comm_samples,
  sample_type = "commercial")

# calculate weighted age frequencies for commercial data:
tidy_ages_weighted(rs_comm_samples,
  sample_type = "commercial",
  dat_catch = rs_catch)

# calculate weighted length frequencies for commercial data:
tidy_lengths_weighted(rs_comm_samples,
  sample_type = "commercial",
  bin_size = 2,
  dat_catch = rs_catch)
}
}
